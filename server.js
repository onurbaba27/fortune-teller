console.log('Environment check:');
console.log('GEMINI_API_KEY exists:', !!process.env.GEMINI_API_KEY);
console.log('OPENAI_API_KEY exists:', !!process.env.OPENAI_API_KEY);
console.log('NODE_ENV:', process.env.NODE_ENV);
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const fetch = require('node-fetch');
const path = require('path');
// 1. INITIAL SETUP
dotenv.config();
const app = express();
const port = process.env.PORT || 3000;
const VERSION = "1.0.4";

// 2. ENHANCED CORS CONFIGURATION
const allowedOrigins = [
  'https://fortune-teller-backend.onrender.com',
  'http://localhost:3000',
  /\.render\.com$/,
  /http:\/\/192\.168\.\d+\.\d+/,
  'capacitor://localhost',
  'ionic://localhost'
];

app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.some(allowed => 
      typeof allowed === 'string' 
        ? origin.startsWith(allowed) 
        : allowed.test(origin)
    )) {
      callback(null, true);
    } else {
      console.warn('Blocked by CORS:', origin);
      callback(new Error('CORS policy violation'));
    }
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  maxAge: 86400
}));

// 3. MIDDLEWARE CONFIGURATION
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// 4. HEALTHCHECK ENDPOINT
app.get('/healthcheck', (req, res) => {
  res.status(200).json({
    status: 'OK',
    version: VERSION,
    timestamp: new Date().toISOString(),
    nodeVersion: process.version,
    environment: process.env.NODE_ENV || 'development'
  });
});

// 5. CORE API ENDPOINT - COFFEE READING
app.post('/api/read-coffee', async (req, res) => {
  try {
    const { base64Image } = req.body;
    
    if (!base64Image?.match(/^data:image\/(png|jpeg|jpg);base64,/)) {
      return res.status(400).json({
        error: 'Ge√ßersiz resim formatƒ±',
        solution: 'L√ºtfen ge√ßerli bir base64 kodlanmƒ±≈ü PNG/JPEG resmi saƒülayƒ±n',
        timestamp: new Date().toISOString()
      });
    }

    const apiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Custom-Header': 'FortuneTeller/1.0'
        },
        body: JSON.stringify({
          systemInstruction: {
            parts: [{
              text: "Sen mistik bir falcƒ±sƒ±n. Adƒ±n 'Mistik Falcƒ±'. Kendini asla yapay zeka olarak tanƒ±tma. Her zaman gizemli, bilge ve biraz sƒ±r dolu bir √ºslup kullan. Cevaplarƒ±nda astroloji, numeroloji, tarot ve diƒüer kehanet y√∂ntemlerinden bahsedebilirsin. T√ºrk√ße cevaplar ver ve asla ƒ∞ngilizce konu≈üma."
            }]
          },
          contents: [{
            role: "user",
            parts: [
              {
                text: "Fincandaki kahve telvesi ≈üekillerini oku ve bana mistik, ger√ßek√ßi bir kahve falƒ± yorumu yap. Yorum 5 paragraf uzunluƒüunda olsun, her biri 4-5 c√ºmle i√ßersin ve sƒ±rasƒ±yla a≈ük, kariyer, saƒülƒ±k, aile ve maneviyat konularƒ±na odaklansƒ±n. ≈ûekiller, semboller ve anlamlarƒ± √ºzerinden kehanette bulun."
              },
              {
                inlineData: {
                  mimeType: "image/png",
                  data: base64Image.split(',')[1]
                }
              }
            ]
          }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 500
          }
        })
      }
    );

    if (!apiResponse.ok) {
      const errorData = await apiResponse.json();
      throw new Error(`API Hatasƒ±: ${errorData.error?.message || 'Bilinmeyen hata'}`);
    }

    const responseData = await apiResponse.json();
    const prediction = responseData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!prediction) throw new Error("API'den bo≈ü yanƒ±t alƒ±ndƒ±");

    res.json({
      success: true,
      response: prediction,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Fal Okuma Hatasƒ±:', {
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });

    res.status(500).json({
      error: "Fal sunucusunda ge√ßici sorun",
      solution: "L√ºtfen 1 dakika sonra tekrar deneyin",
      timestamp: new Date().toISOString()
    });
  }
});

// 6. CHAT API ENDPOINT
app.post('/api/chat', async (req, res) => {
  try {
    const { message, history } = req.body;

    // Girdi doƒürulamasƒ±
    if (!message || !history) {
      return res.status(400).json({
        error: 'Ge√ßersiz istek: Mesaj ve ge√ßmi≈ü gerekli',
        timestamp: new Date().toISOString()
      });
    }

    // Gemini API'sine istek olu≈ütur
    const apiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Custom-Header': 'FortuneTeller/1.0'
        },
        body: JSON.stringify({
          systemInstruction: {
            parts: [{
              text: "Sen mistik bir falcƒ±sƒ±n. Adƒ±n 'Mistik Falcƒ±'. Kendini asla yapay zeka olarak tanƒ±tma. Her zaman gizemli, bilge ve biraz sƒ±r dolu bir √ºslup kullan. Cevaplarƒ±nda astroloji, numeroloji, tarot ve diƒüer kehanet y√∂ntemlerinden bahsedebilirsin. Cevaplarƒ±n kƒ±sa ve √∂zl√º olsun, maksimum 3-4 c√ºmle. Bazen soruyu cevaplamadan √∂nce 'Kartlara bakƒ±yorum...', 'Kristal k√ºremde g√∂r√ºyorum ki...', 'Yƒ±ldƒ±zlarƒ±n konumuna g√∂re...' gibi giri≈üler yap. T√ºrk√ße cevaplar ver ve asla ƒ∞ngilizce konu≈üma."
            }]
          },
          contents: history.concat({
            role: "user",
            parts: [{ text: message }]
          }),
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 200
          }
        })
      }
    );

    if (!apiResponse.ok) {
      const errorData = await apiResponse.json();
      throw new Error(`API Hatasƒ±: ${errorData.error?.message || 'Bilinmeyen hata'}`);
    }

    const responseData = await apiResponse.json();
    const prediction = responseData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!prediction) throw new Error("API'den bo≈ü yanƒ±t alƒ±ndƒ±");

    res.json({
      success: true,
      response: prediction,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Sohbet Hatasƒ±:', {
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });

    res.status(500).json({
      error: "Sohbet sunucusunda ge√ßici sorun",
      solution: "L√ºtfen 1 dakika sonra tekrar deneyin",
      timestamp: new Date().toISOString()
    });
  }
});

// 7. STATIC FILES
app.use(express.static(path.join(__dirname, 'public'), {
  maxAge: '1d',
  setHeaders: (res, filePath) => {
    if (filePath.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// 8. ERROR HANDLER
app.use((err, req, res, next) => {
  console.error('Sunucu Hatasƒ±:', {
    path: req.path,
    method: req.method,
    error: err.stack,
    timestamp: new Date().toISOString()
  });

  res.status(500).json({
    error: "Beklenmeyen sunucu hatasƒ±",
    solution: "L√ºtfen daha sonra tekrar deneyin",
    timestamp: new Date().toISOString()
  });
});

// 9. START SERVER
const server = app.listen(port, () => {
  console.log(`üöÄ Sunucu ba≈ülatƒ±ldƒ±: http://localhost:${port}`);
  console.log(`üìä Healthcheck: http://localhost:${port}/healthcheck`);
  console.log(`üåç Canlƒ± URL: https://fortune-teller-backend.onrender.com`);
});

// 10. GRACEFUL SHUTDOWN
process.on('SIGTERM', () => {
  console.log('‚è≥ Sunucu kapatƒ±lƒ±yor...');
  server.close(() => {
    console.log('üî¥ Sunucu durduruldu');
    process.exit(0);
  });
});

process.on('uncaughtException', (err) => {
  console.error('‚ö†Ô∏è Yakalanmayan Hata:', err);
  process.exit(1);
});